// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: todo-service.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	todo-service.proto

It has these top-level messages:
	ToDo
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	ReadAllRequest
	ReadAllResponse
*/
package v1

import context "context"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"

import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type ToDoORM struct {
	Description string
	Id          int64
	Reminder    *time.Time
	Title       string
}

// TableName overrides the default tablename generated by GORM
func (ToDoORM) TableName() string {
	return "to_dos"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *ToDo) ToORM(ctx context.Context) (ToDoORM, error) {
	to := ToDoORM{}
	var err error
	if prehook, ok := interface{}(m).(ToDoWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Title = m.Title
	to.Description = m.Description
	if m.Reminder != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.Reminder); err != nil {
			return to, err
		}
		to.Reminder = &t
	}
	if posthook, ok := interface{}(m).(ToDoWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ToDoORM) ToPB(ctx context.Context) (ToDo, error) {
	to := ToDo{}
	var err error
	if prehook, ok := interface{}(m).(ToDoWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Title = m.Title
	to.Description = m.Description
	if m.Reminder != nil {
		if to.Reminder, err = ptypes1.TimestampProto(*m.Reminder); err != nil {
			return to, err
		}
	}
	if posthook, ok := interface{}(m).(ToDoWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type ToDo the arg will be the target, the caller the one being converted from

// ToDoBeforeToORM called before default ToORM code
type ToDoWithBeforeToORM interface {
	BeforeToORM(context.Context, *ToDoORM) error
}

// ToDoAfterToORM called after default ToORM code
type ToDoWithAfterToORM interface {
	AfterToORM(context.Context, *ToDoORM) error
}

// ToDoBeforeToPB called before default ToPB code
type ToDoWithBeforeToPB interface {
	BeforeToPB(context.Context, *ToDo) error
}

// ToDoAfterToPB called after default ToPB code
type ToDoWithAfterToPB interface {
	AfterToPB(context.Context, *ToDo) error
}

// DefaultCreateToDo executes a basic gorm create call
func DefaultCreateToDo(ctx context.Context, in *ToDo, db *gorm1.DB) (*ToDo, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ToDoORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadToDo executes a basic gorm read call
func DefaultReadToDo(ctx context.Context, in *ToDo, db *gorm1.DB) (*ToDo, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &ToDoORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ToDoORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ToDoORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ToDoORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteToDo(ctx context.Context, in *ToDo, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ToDoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ToDoORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteToDoSet(ctx context.Context, in []*ToDo, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ToDoORM{})).(ToDoORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ToDoORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ToDoORM{})).(ToDoORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ToDoORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*ToDo, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*ToDo, *gorm1.DB) error
}

// DefaultStrictUpdateToDo clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateToDo(ctx context.Context, in *ToDo, db *gorm1.DB) (*ToDo, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateToDo")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ToDoORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ToDoORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ToDoORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchToDo executes a basic gorm update call with patch behavior
func DefaultPatchToDo(ctx context.Context, in *ToDo, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*ToDo, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj ToDo
	var err error
	if hook, ok := interface{}(&pbObj).(ToDoWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadToDo(ctx, &ToDo{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ToDoWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskToDo(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ToDoWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateToDo(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ToDoWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ToDoWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *ToDo, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *ToDo, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *ToDo, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *ToDo, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultApplyFieldMaskToDo patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskToDo(ctx context.Context, patchee *ToDo, patcher *ToDo, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*ToDo, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Reminder" {
			patchee.Reminder = patcher.Reminder
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListToDo executes a gorm list call
func DefaultListToDo(ctx context.Context, db *gorm1.DB) ([]*ToDo, error) {
	in := ToDo{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &ToDoORM{}, &ToDo{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ToDoORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ToDoORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*ToDo{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ToDoORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ToDoORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]ToDoORM) error
}
